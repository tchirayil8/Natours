
/*
block gives elements individual space "block"
*/
.btn {
  &,
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /* delays the transform on the btn, looks smoother */
    transition: all .2s;
    font-size: $default-font-size;

    border: none;
    cursor: pointer;
  }

  &:hover {
    transform: translateY(-.3rem);
    box-shadow: 0 1rem 2rem rgba($color-black,0.2);
  }

  &:active,
  &:focus {
    transform: translateY(-.1rem);
    box-shadow: 0 .5rem 1rem rgba($color-black,0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }

  &--green {
    background-color: $color-primary;
    color: $color-white;
  }

  &::after {
    background-color: $color-primary;
  }
}

.btn-text{
  &:link,
  &:visited {
    font-size: $default-font-size;
    color: $color-primary;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid $color-primary;
    padding: 3px;
    transition: all .2s;
  }

  &:hover{
    background-color: $color-primary;
    color: $color-white;
    box-shadow: 0 1rem 2rem rgba($color-black, .15);
    transform: translateY(-2px);
  }
  &:active{
    box-shadow: 0 .5rem 1rem rgba($color-black, .15);
    transform: translateY(0);
  }
}

/*
create a state for the button
ex:
btn:after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
}
manipulate state during btn effects
ex:
btn:hover::after{
  transform: scale(2);
}
"when hiovering the button, apply changes to after pseudo-state"
*/
